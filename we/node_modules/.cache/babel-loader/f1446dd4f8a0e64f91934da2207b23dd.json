{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\mtp8\\\\Documents\\\\GitHub\\\\we\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:\\\\Users\\\\mtp8\\\\Documents\\\\GitHub\\\\we\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import React,{useState,useEffect}from'react';import'../css/Calendar.scss';import'../css/Progress.scss';import Calendar from'react-calendar';var today=new Date(Date.now());var getRecord=function getRecord(username,setRecord){fetch(\"\".concat(window.location.origin,\"/getlogs?user=\").concat(username)).then(function(response){if(!response.ok)console.log(response.statusText);else response.json().then(function(logs){var record={};logs.forEach(function(log){var dateStr=new Date(log.date).toDateString();if(!record[dateStr])record[dateStr]=[];record[dateStr].push({name:log.name,score:log.score});});setRecord(record);});}).catch(console.log);};var getAssignments=function getAssignments(username,setAssignments){fetch(\"\".concat(window.location.origin,\"/getassignments?user=\").concat(username)).then(function(response){if(!response.ok)console.log(response.statusText);else response.json().then(function(assignments){setAssignments(assignments.map(function(assignment){return _objectSpread({},assignment,{dateAssigned:new Date(assignment.date_assigned)});}));//setAssignedDays(assignments.reduce((prev, curr) => prev | parseInt(curr.schedule, 2), 0).toString(2).padStart(7, '0').split(''))\n});}).catch(console.log);};var mapScoreToClass=function mapScoreToClass(dailyRecords){if(!dailyRecords)return'noScore';var score=dailyRecords.reduce(function(prev,curr){return prev+curr.score;},0)/dailyRecords.length;if(score<1000)return'goodScore';else if(score<2000)return'medScore';else return'badScore';};var Progress=function Progress(_ref){var username=_ref.username;console.log(\"getting progress for patient \".concat(username));// const testA = [{\"name\":\"first workout!\",\"schedule\":\"1110000\",\"dateAssigned\":new Date(\"2020-04-11T06:00:00.000Z\")},{\"name\":\"Lots of people do this workout\",\"schedule\":\"0010110\",\"dateAssigned\":new Date(\"2020-04-13T06:00:00.000Z\")}]\nvar _useState=useState({}),_useState2=_slicedToArray(_useState,2),record=_useState2[0],setRecord=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),assignments=_useState4[0],setAssignments=_useState4[1];//Should implement this later, would map workout names to schedules (binary arrays)\n//const [assignedDays, setAssignedDays] = useState([0,0,0,0,0,0,0])\nvar hasAssignment=function hasAssignment(date){return assignments.find(function(assignment){return assignment.dateAssigned<date&&assignment.schedule.charAt(date.getDay())==='1';});};useEffect(function(){getRecord(username,setRecord);getAssignments(username,setAssignments);},[username]);return React.createElement(\"div\",{className:\"Progress\"},React.createElement(Calendar,{calendarType:\"US\",className:\"Progress__calendar\",tileClassName:function tileClassName(_ref2){var activeStartDate=_ref2.activeStartDate,date=_ref2.date,view=_ref2.view;return view==='month'&&date<=today&&hasAssignment(date)!==undefined?mapScoreToClass(record[date.toDateString()]):null;}}),React.createElement(\"div\",{style:{display:'flex',flexDirection:'column',marginLeft:'1rem'}},React.createElement(\"h2\",null,\"Legend\"),React.createElement(\"div\",{className:\"Progress__legend\"},React.createElement(\"div\",{className:\"goodScore\"},\"Good Score\"),React.createElement(\"div\",{className:\"medScore\"},\"Mediocre Score\"),React.createElement(\"div\",{className:\"badScore\"},\"Bad Score\"),React.createElement(\"div\",{className:\"noScore\"},\"No Workout Recorded\"),React.createElement(\"div\",{style:{backgroundColor:'#fef975'}},\"Today\"))));};export default Progress;","map":{"version":3,"sources":["C:/Users/mtp8/Documents/GitHub/we/src/pages/Progress.js"],"names":["React","useState","useEffect","Calendar","today","Date","now","getRecord","username","setRecord","fetch","window","location","origin","then","response","ok","console","log","statusText","json","logs","record","forEach","dateStr","date","toDateString","push","name","score","catch","getAssignments","setAssignments","assignments","map","assignment","dateAssigned","date_assigned","mapScoreToClass","dailyRecords","reduce","prev","curr","length","Progress","hasAssignment","find","schedule","charAt","getDay","activeStartDate","view","undefined","display","flexDirection","marginLeft","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../css/Calendar.scss'\r\nimport '../css/Progress.scss'\r\nimport Calendar from 'react-calendar'\r\n\r\nconst today = new Date(Date.now())\r\n\r\nconst getRecord = (username, setRecord) => {\r\n  fetch(`${window.location.origin}/getlogs?user=${username}`)\r\n    .then(response => {\r\n        if(!response.ok) console.log(response.statusText)\r\n        else response.json().then(logs => {\r\n            const record = {}\r\n            logs.forEach(log => {\r\n              const dateStr = new Date(log.date).toDateString()\r\n              if(!record[dateStr]) record[dateStr] = []\r\n              record[dateStr].push({name: log.name, score: log.score})\r\n            })\r\n            setRecord(record)\r\n        })\r\n    }).catch(console.log)\r\n}\r\n\r\nconst getAssignments = (username, setAssignments) => {\r\n  fetch(`${window.location.origin}/getassignments?user=${username}`)\r\n  .then(response => {\r\n      if(!response.ok) console.log(response.statusText)\r\n      else response.json().then(assignments => {\r\n        setAssignments(assignments.map(assignment => {return {...assignment, dateAssigned: new Date(assignment.date_assigned)}}))\r\n          //setAssignedDays(assignments.reduce((prev, curr) => prev | parseInt(curr.schedule, 2), 0).toString(2).padStart(7, '0').split(''))\r\n      })\r\n  }).catch(console.log)\r\n}\r\n\r\nconst mapScoreToClass = (dailyRecords) => {\r\n  if(!dailyRecords) return 'noScore'\r\n  const score = dailyRecords.reduce((prev, curr) => prev + curr.score, 0) / dailyRecords.length\r\n  if(score < 1000) return 'goodScore'\r\n  else if (score < 2000) return 'medScore'\r\n  else return 'badScore'\r\n}\r\n\r\nconst Progress = ({username}) => {\r\n  console.log(`getting progress for patient ${username}`)\r\n  // const testA = [{\"name\":\"first workout!\",\"schedule\":\"1110000\",\"dateAssigned\":new Date(\"2020-04-11T06:00:00.000Z\")},{\"name\":\"Lots of people do this workout\",\"schedule\":\"0010110\",\"dateAssigned\":new Date(\"2020-04-13T06:00:00.000Z\")}]\r\n  const [record, setRecord] = useState({})\r\n  const [assignments, setAssignments] = useState([]) //Should implement this later, would map workout names to schedules (binary arrays)\r\n  //const [assignedDays, setAssignedDays] = useState([0,0,0,0,0,0,0])\r\n\r\n  const hasAssignment = date => assignments.find(assignment => assignment.dateAssigned < date && assignment.schedule.charAt(date.getDay()) === '1')\r\n  \r\n  useEffect(() => {\r\n    getRecord(username, setRecord)\r\n    getAssignments(username, setAssignments)\r\n  }, [username])\r\n\r\n  return (\r\n    <div className=\"Progress\">\r\n      <Calendar calendarType=\"US\" className=\"Progress__calendar\" tileClassName={ ({activeStartDate, date, view}) => view === 'month' && date <= today && hasAssignment(date) !== undefined ? mapScoreToClass(record[date.toDateString()]) : null } />\r\n      <div style={{display: 'flex', flexDirection: 'column', marginLeft: '1rem'}}>\r\n        <h2>Legend</h2>\r\n        <div className=\"Progress__legend\">\r\n          <div className='goodScore'>Good Score</div>\r\n          <div className='medScore'>Mediocre Score</div>\r\n          <div className='badScore'>Bad Score</div>\r\n          <div className='noScore'>No Workout Recorded</div>\r\n          <div style={{backgroundColor: '#fef975'}}>Today</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Progress;\r\n"]},"metadata":{},"sourceType":"module"}